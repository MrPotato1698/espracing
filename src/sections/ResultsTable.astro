---
import { supabase } from "@/db/supabase";

interface Race {
  RaceName: string;
  filename: string;
  ChampID: string;
  ChampName: string;
  Season: string;
}

interface Championship {
  name: string;
  races: Race[];
  season: string;
}

const { data: resultSetData } = await supabase
  .from("race")
  .select("name, filename, championship!inner(id, name, season)")
  .order("orderinchamp", { ascending: true });

const resultSet = resultSetData;


const RacesData: Race[] = (resultSet ?? []).map((race) => ({
  RaceName: race.name ?? "",
  filename: race.filename,
  ChampID: race.championship.id.toString(),
  ChampName: race.championship.name ?? "",
  Season: race.championship.season ?? "",
}));

let racesByChampionship: { [key: string]: Championship } = {};

if (RacesData.length == 0) {
  console.log("No hay datos");
} else {
  // Agrupamos las carreras por campeonato
  racesByChampionship = RacesData.reduce(
    (acc: { [key: string]: Championship }, race: Race) => {
      if (!acc[String(race.ChampID)]) {
        acc[String(race.ChampID)] = {
          name: String(race.ChampName) ?? "Unknown Championship",
          races: [],
          season: String(race.Season) ?? "Unknown Season",
        };
      }
      acc[String(race.ChampID)].races.push(race);
      return acc;
    },
    {} as { [key: string]: Championship }
  );
}
---

<div class="grid grid-cols-1 gap-4 mx-2 md:grid-cols-2 lg:grid-cols-3">
  <div>
    <p class = "font-semibold text-xl pl-2 pb-2">Temporada</p>
    <select
      id="select-season"
      class="block m-auto w-full px-4 py-3 text-lg font-medium rounded-xl pe-9 focus:border-primary disabled:opacity-50 disabled:pointer-events-none bg-darkSecond border-neutral-700 text-lightPrimary placeholder-neutral-500"
    >
      {
        [
          ...new Set(
            Object.values(racesByChampionship).map((champ) => champ.season)
          ),
        ].map((season) => (
          <option value={season} class="text-lightSecond">
            {season}
          </option>
        ))
      }
    </select>
  </div>

  <div>
    <p class = "font-semibold text-xl pl-2 pb-2">Campeonato</p>
    <select
      id="select-champ"
      class="block m-auto w-full px-4 py-3 text-lg font-medium rounded-xl pe-9 focus:border-primary disabled:opacity-50 disabled:pointer-events-none bg-darkSecond border-neutral-700 text-lightPrimary placeholder-neutral-500"
    >
      {
        Object.values(racesByChampionship).map((champ) => (
          <option
            value={champ.name}
            class="text-lightSecond"
            data-season={champ.season}
          >
            {champ.name}
          </option>
        ))
      }
    </select>
  </div>

  <div>
    <p class = "font-semibold text-xl pl-2 pb-2">Carrera</p>
    <select
      id="select-race"
      class="block m-auto w-full px-4 py-3 text-lg font-medium rounded-xl pe-9 focus:border-primary disabled:opacity-50 disabled:pointer-events-none bg-darkSecond border-neutral-700 text-lightPrimary placeholder-neutral-500"
    >
      {
        Object.values(racesByChampionship).flatMap((champ) =>
          champ.races.map((race) => (
            <option
              value={race.filename}
              class="text-lightSecond"
              data-season={champ.season}
              data-championship={champ.name}
            >
              {race.RaceName}
            </option>
          ))
        )
      }
    </select>
  </div>
</div>

<!-- Tabla de resultados -->
<div class="container mx-auto w-auto">
  <section>
    <div class="mt-8 grid grid-cols-1 gap-4 mx-2 md:grid-cols-2">
    <button
      id="loadButtonSimpleResults"
      class="no-underline bg-darkSecond rounded-xl my-4 font-medium text-white text-lg py-4 px-8 block mx-auto hover:text-darkPrimary hover:bg-primary"
    >
      Cargar Resultados de Carrera
    </button>

    <button
      id="loadButtonComplexResults"
      onclick="window.location.href = '/complexracestats/'+document.getElementById('select-race').value"
      class="no-underline bg-darkSecond rounded-xl my-4 font-medium text-white text-lg py-4 px-8 block mx-auto hover:text-darkPrimary hover:bg-primary"
    >
      Ver Estadistica Completa
    </button>

  </div>
    <div id="datosCircuito"></div>
    <div id="tablaResultados"></div>
    <div id="tablaSanciones"></div>
    <div id="tablaNotas"></div>
  </section>
</div>

<script>
  // Script para cargar los resultados de la carrera seleccionada
  import "@/pages/api/raceresults/getRaceResultsSimple.ts";
</script>

<script is:inline data-astro-rerun>
  function initializeSelects() {
    const seasonSelect = document.getElementById("select-season");
    const champSelect = document.getElementById("select-champ");
    const raceSelect = document.getElementById("select-race");

    if (!(seasonSelect instanceof HTMLSelectElement) ||
        !(champSelect instanceof HTMLSelectElement) ||
        !(raceSelect instanceof HTMLSelectElement)) {
      return;
    }

    if (!seasonSelect || !champSelect || !raceSelect) {
      console.error("No se pudieron encontrar todos los elementos necesarios");
      return;
    }

    function filterChampionships() {
      const selectedSeason = seasonSelect.value;

      Array.from(champSelect.options).forEach(option => {
        const season = option.getAttribute('data-season');
        option.hidden = season !== selectedSeason;
      });

      const visibleOptions = Array.from(champSelect.options).filter(opt => !opt.hidden);
      if (visibleOptions.length > 0) {
        champSelect.value = visibleOptions[0].value;
        filterRaces();
      }
    }

    function filterRaces() {
      const selectedSeason = seasonSelect.value;
      const selectedChamp = champSelect.value;

      Array.from(raceSelect.options).forEach(option => {
        const season = option.getAttribute('data-season');
        const champ = option.getAttribute('data-championship');
        option.hidden = !(season === selectedSeason && champ === selectedChamp);
      });

      const visibleRaces = Array.from(raceSelect.options).filter(opt => !opt.hidden);
      if (visibleRaces.length > 0) {
        raceSelect.value = visibleRaces[0].value;
      }
    }

    // Limpiar event listeners anteriores
    seasonSelect.removeEventListener('change', filterChampionships);
    champSelect.removeEventListener('change', filterRaces);

    // Añadir nuevos event listeners
    seasonSelect.addEventListener('change', filterChampionships);
    champSelect.addEventListener('change', filterRaces);

    // Inicializar filtros
    filterChampionships();
  }

  // Inicializar al cargar
  initializeSelects();

  // Reinicializar en navegación
  document.addEventListener('astro:page-load', initializeSelects);
</script>
