---
import { supabase } from "@/db/supabase";

interface Race {
  RaceName: string;
  filename: string;
  ChampID: string;
  ChampName: string;
  Season: string;
}

interface Championship {
  name: string;
  races: Race[];
  season: string;
}

interface Props {
  actualchamp: string;
}

const { actualchamp } = Astro.props;

let resultSet;

if (actualchamp === "true") {
  const { data: lastChampData } = await supabase
    .from("race")
    .select("name, championship!inner(id, name, season)")
    .order("id", { ascending: false })
    .single();

  console.log('Ultimo Campeonato: '+lastChampData?.championship.name);

  if (!lastChampData) {
    console.log("No hay datos");
  } else {
    const { data: resultSetData } = await supabase
      .from("race")
      .select("name, filename, championship!inner(id, name, season)")
      .eq("championship", lastChampData.championship.id);

    resultSet = resultSetData;
  }
} else {
  const { data: resultSetData } = await supabase
    .from("race")
    .select("name, filename, championship!inner(id, name, season)")
    .order("id", { ascending: true });

  resultSet = resultSetData;
}

const RacesData: Race[] = (resultSet ?? []).map((race) => ({
  RaceName: race.name ?? "",
  filename: race.filename,
  ChampID: race.championship.id.toString(),
  ChampName: race.championship.name ?? "",
  Season: race.championship.season ?? "",
}));

let racesByChampionship: { [key: string]: Championship } = {};

if (RacesData.length == 0) {
  console.log("No hay datos");
} else {
  // Agrupamos las carreras por campeonato
  racesByChampionship = RacesData.reduce(
    (acc: { [key: string]: Championship }, race: Race) => {
      if (!acc[String(race.ChampID)]) {
        acc[String(race.ChampID)] = {
          name: String(race.ChampName) ?? "Unknown Championship",
          races: [],
          season: String(race.Season) ?? "Unknown Season",
        };
      }
      acc[String(race.ChampID)].races.push(race);
      return acc;
    },
    {} as { [key: string]: Championship }
  );
}
---

{
  actualchamp === "true" ? (
    <p class="py-4 text-4xl font-bold text-center">
      Selecciona la carrera a revisar
    </p>
  ) : (
    <p class="py-4 text-4xl font-bold text-center">
      Selecciona el campeonato y carrera pasada a revisar
    </p>
  )
}

<div class="grid grid-cols-1 gap-4 mx-2 md:grid-cols-2 lg:grid-cols-3">
  <div>
    <p class = "font-semibold text-xl pl-2 pb-2">Temporada</p>
    <select
      id="select-season"
      class="block m-auto w-full px-4 py-3 text-lg font-medium rounded-xl pe-9 focus:border-[#da392b] disabled:opacity-50 disabled:pointer-events-none bg-[#19191c] border-neutral-700 text-[#f9f9f9] placeholder-neutral-500"
    >
      {
        [
          ...new Set(
            Object.values(racesByChampionship).map((champ) => champ.season)
          ),
        ].map((season) => (
          <option value={season} class="text-[#f7f7f7]">
            {season}
          </option>
        ))
      }
    </select>
  </div>

  <div>
    <p class = "font-semibold text-xl pl-2 pb-2">Campeonato</p>
    <select
      id="select-champ"
      class="block m-auto w-full px-4 py-3 text-lg font-medium rounded-xl pe-9 focus:border-[#da392b] disabled:opacity-50 disabled:pointer-events-none bg-[#19191c] border-neutral-700 text-[#f9f9f9] placeholder-neutral-500"
    >
      {
        Object.values(racesByChampionship).map((champ) => (
          <option
            value={champ.name}
            class="text-[#f7f7f7]"
            data-season={champ.season}
          >
            {champ.name}
          </option>
        ))
      }
    </select>
  </div>

  <div>
    <p class = "font-semibold text-xl pl-2 pb-2">Carrera</p>
    <select
      id="select-race"
      class="block m-auto w-full px-4 py-3 text-lg font-medium rounded-xl pe-9 focus:border-[#da392b] disabled:opacity-50 disabled:pointer-events-none bg-[#19191c] border-neutral-700 text-[#f9f9f9] placeholder-neutral-500"
    >
      {
        Object.values(racesByChampionship).flatMap((champ) =>
          champ.races.map((race) => (
            <option
              value={race.filename}
              class="text-[#f7f7f7]"
              data-season={champ.season}
              data-championship={champ.name}
            >
              {race.RaceName}
            </option>
          ))
        )
      }
    </select>
  </div>
</div>

<!-- Tabla de resultados -->
<div class="container mx-auto">
  <section>
    <div class="mt-8 grid grid-cols-1 gap-4 mx-2 md:grid-cols-2 lg:grid-cols-3">
    <button
      id="loadButtonSimpleResults"
      class="no-underline bg-[#19191c] rounded-xl my-4 font-medium text-white text-lg py-4 px-8 block mx-auto hover:text-[#0f0f0f] hover:bg-[#da392b]"
    >
      Cargar Resultados de Carrera
    </button>

    <button
      id="loadButtonComplexResults"
      onclick="window.location.href = '/complexracestats/'+document.getElementById('select-race').value"
      class="no-underline bg-[#19191c] rounded-xl my-4 font-medium text-white text-lg py-4 px-8 block mx-auto hover:text-[#0f0f0f] hover:bg-[#da392b]"
    >
      Ver Estadistica Completa
    </button>

    <button
      id="loadButtonComparatives"
      onclick="window.location.href = '#'"
      class="no-underline bg-[#19191c] rounded-xl my-4 font-medium text-white text-lg py-4 px-8 block mx-auto hover:text-[#0f0f0f] hover:bg-[#da392b]"
    >
      Comparativas entre Pilotos
    </button>
  </div>
    <div id="datosCircuito"></div>
    <div id="tablaResultados"></div>
  </section>
</div>

<script>
  // Script para cargar los resultados de la carrera seleccionada
  import "@/pages/api/raceresults/getRaceResultsSimple.ts";
</script>

<script is:inline data-astro-rerun>
  console.log('Script de resultados de carrera cargado');
  const seasonSelect = document.getElementById("select-season");
  const champSelect = document.getElementById("select-champ");
  const raceSelect = document.getElementById("select-race");

  if (
    !(seasonSelect instanceof HTMLSelectElement) ||
    !(champSelect instanceof HTMLSelectElement) ||
    !(raceSelect instanceof HTMLSelectElement)
  ){
    console.error("No se pudieron encontrar todos los elementos necesarios");
    throw new Error("No se pudieron encontrar todos los elementos necesarios");
    // return;
  }

  // Función para filtrar campeonatos por temporada
  function filterChampionships() {
    const selectedSeason = seasonSelect.value;

    Array.from(champSelect.options).forEach(option => {
      const season = option.getAttribute('data-season');
      option.hidden = season !== selectedSeason;
    });

    // Actualizar selección del campeonato
    const visibleOptions = Array.from(champSelect.options).filter(opt => !opt.hidden);
    if (visibleOptions.length > 0) {
      champSelect.value = visibleOptions[0].value;
      // Después de cambiar el campeonato, actualizar las carreras
      filterRaces();
    }
  }

  function filterRaces() {
    const selectedSeason = seasonSelect.value;
    const selectedChamp = champSelect.value;

    Array.from(raceSelect.options).forEach(option => {
      const season = option.getAttribute('data-season');
      const champ = option.getAttribute('data-championship');
      option.hidden = !(season === selectedSeason && champ === selectedChamp);
    });

    // Actualizar selección de carrera
    const visibleRaces = Array.from(raceSelect.options).filter(opt => !opt.hidden);
    if (visibleRaces.length > 0) {
      raceSelect.value = visibleRaces[0].value;
    }
  }

  // Event Listeners
  seasonSelect.addEventListener('change', () => {
    filterChampionships();
  });

  champSelect.addEventListener('change', () => {
    filterRaces();
  });

  // Inicialización
  filterChampionships();
</script>
