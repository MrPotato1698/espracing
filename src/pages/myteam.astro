---
import Layout from "@/layouts/ProfileLayout.astro";
import { supabase } from "@/db/supabase";
import { TeamPilotsTable as TeamDriversTable } from "@/components/team-drivers-table";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

// Set the session with the cookies
const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

// If there is an error, delete the cookies and redirect to login
if (errorAuth) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/login");
}

const id = dataAuth?.user?.id || "";

const {data: roleData} = await supabase
  .from("profiles")
  .select("roleesp")
  .eq("id", id)
  .single();

const {data: TeamData} = await supabase
  .from("team")
  .select("name, description, image, id, profiles!inner(id)")
  .eq("profiles.id", id)
  .single();

let idTeam;

if (TeamData === null || TeamData === undefined) {
  return redirect("/joinateam");
} else {
  idTeam = TeamData.id;
}

const {data: TeamUsersData} = await supabase
  .from("profiles")
  .select("id, full_name, races, wins, top5, top10, avatar, poles, podiums, is_team_manager")
  .eq("team", idTeam);


const roleEditingPrivileges = roleData?.roleesp === 0 ||roleData?.roleesp === 1 || roleData?.roleesp === 2 ? true : false;

const serializedTeamUsersData = TeamUsersData ? JSON.parse(JSON.stringify(TeamUsersData)) : [];
---

<Layout title="ESP Racing: Mi Equipo">
  <h2 class="text-5xl font-extrabold border-b-2 border-primary w-full">
    Mi Equipo
  </h2>

  <img src={String(TeamData.image)} alt="Avatar" class="w-20 pt-5" />
  <div class="grid w-11/12 grid-cols-1 my-5">
    <div class="mb-2">
      <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
        Nombre
      </h3>
      <p class="pl-2 text-2xl font-medium">{TeamData.name}</p>
    </div>

    <h2 class="w-full mt-12 text-5xl font-extrabold"></h2>
    <div class="grid w-11/12 grid-cols-1 my-5">
      <div class="blockdata">
        <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
          Descripción
        </h3>
        <p class="pl-2 text-2xl font-medium">{TeamData.description}</p>
      </div>
    </div>

    <div class="py-4 mx-auto text-center" style="width: 99%">
      <p2 class="text-5xl font-bold border-b border-primary w-fit mx-auto">
        Tabla de Pilotos
      </p2>
      <TeamDriversTable
        client:load
        pilots={serializedTeamUsersData}
        currentUserId={id}
        isCurrentUserManager={TeamUsersData?.find(u => u.id === id)?.is_team_manager || false}
        teamId={idTeam}
        adminMode={false}
      />
    </div>

    <div class="grid grid-flow-col mt-8">
      {
        roleEditingPrivileges ? (
          <a
            href="/modteamprofile"
            class="py-1.5 px-2 w-fit bg-darkPrimary text-lightPrimary border-primary border-2 rounded-md font-medium text-lg hover:bg-darkSecond"
          >
            Modificar Perfil Equipo
          </a>
        ) : null
      }
      <button
        class="exitTeam py-1.5 px-2 w-fit bg-darkPrimary text-lightPrimary border-primary border-2 rounded-md font-medium text-lg hover:bg-darkSecond"
        data-id={id}
        data-teamid = {idTeam}
      >
        Salir del equipo
    </button>
    </div>
  </div>

  <style>
    tbody tr:nth-child(odd) {
      background-color: #0f0f0f;
    }

    tbody tr:nth-child(even) {
      background-color: #19191c;
    }
  </style>

  <script>
    import { showToast } from "@/lib/utils";
    window.showToast = showToast;
  </script>

  <script is:inline data-astro-rerun>
    document.addEventListener('astro:page-load', () => {
      const exitTeam = document.querySelectorAll('.exitTeam');

      exitTeam.forEach(button => {
        button.addEventListener('click', async (e) => {
          e.preventDefault();
          const id = button.getAttribute('data-id');
          const teamid = button.getAttribute('data-teamid');

          if (confirm('¿Estás seguro de que quieres salir de este equipo?')) {
            try {
              const response = await fetch('/api/teams/exitFromTeam', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id, teamid }),
              });

              if (response.ok) {
                // Actualizar UI
                window.location.reload();
              } else {
                window.showToast('Error saliendo de equipo: ' + response.error, 'error');
                console.error('Error saliendo de equipo: ', response);
              }
            } catch (error) {
              window.showToast('Error: ' + error, 'error');
              console.error('Error:', error);
            }
          }
        });
      });

      const teamManagerCheckboxes = document.querySelectorAll('input[type="checkbox"][id^="teamManager-"]');
      teamManagerCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', async (e) => {
          const userId = checkbox.getAttribute('data-userid');
          const userModificator = checkbox.getAttribute('data-usermodifcator');
          const isChecked = checkbox.checked;

          if(userModificator === userId) {
            checkbox.checked = !isChecked;
            return window.showToast('No puedes cambiar tu propio estado de jefe de equipo', 'info');
          }
          try {
            const response = await fetch('/api/teams/updateTeamManager', {
              method: 'POST',
              headers: {'Content-Type': 'application/json',},
              body: JSON.stringify({ userId, isTeamManager: isChecked }),
            });

            if (!response.ok) {
              checkbox.checked = !isChecked;
              throw new Error('Error actualizando el estado del manager');
            }
            window.showToast(`${isChecked ? 'Asignado' : 'Removido'} como jefe de equipo correctamente`,'success');

          } catch (error) {
            console.error('Error:', error);
            window.showToast(`Error: ${error.message || 'No se pudo actualizar el estado'}`,'error');
          }
        });
      });
    });
  </script>
</Layout>


