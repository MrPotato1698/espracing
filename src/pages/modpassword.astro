---
import Layout from "@/layouts/NormalLayout.astro";
import OpenEye from "@/icons/OpenEye.astro";
import CloseEye from "@/icons/CloseEye.astro";
---

<Layout title="ESP Racing: Modificar Contraseña">
  <div
    class="absolute bottom-0 left-0 w-full h-full overflow-hidden leading-5 bg-[#f0f0f0] top-72 -z-10 bg-gradient-to-b from-primary via-primary to-darkPrimary"
  >
  </div>

  <div
    class="relative justify-center min-h-screen bg-transparent shadow-xl sm:flex sm:flex-row rounded-3xl"
  >
    <div
      class="z-10 flex flex-col self-center lg:px-14 sm:max-w-4xl xl:max-w-md"
    >
      <div class="flex-col self-start hidden text-lightPrimary lg:flex">
        <h1 class="my-3 text-4xl font-semibold">Modifica tu contraseña</h1>
        <p class="pr-3 text-sm opacity-90">
          Modifica tu contraseña. Recuerda hacerla robusta y segura, y lo importante, que te acuerdes de ella.
        </p>
      </div>
    </div>

    <form
    id="passForm"
    method="post"
    class="z-10 flex self-center justify-center"
    data-astro-reload
  >
    <div class="p-12 mx-auto bg-lightPrimary rounded-3xl w-96">
      <div class="mb-7">
        <h3 class="text-2xl font-semibold text-gray-800">Formulario Nueva Contraseña</h3>
      </div>
      <div class="space-y-6">
        <div class="relative" x-data="{ show: true }">
          <input
            :type="show ? 'password' : 'text'"
            name="new_pass"
            id="new_pass"
            class="w-full px-4 py-3 text-sm text-darkPrimary bg-gray-200 border border-gray-200 rounded-lg focus:bg-gray-100 focus:outline-none focus:border-darkPrimary focus:text-darkSecond"
            placeholder="Nueva Contraseña"
          />
          <div
            class="absolute inset-y-0 right-0 flex items-center mr-3 text-sm leading-5"
          >
              <OpenEye/>
              <CloseEye />
          </div>
        </div>

        <div class="relative" x-data="{ show: true }">
          <input
            :type="show ? 'password' : 'text'"
            name="repeat_new_pass"
            id="repeat_new_pass"
            class="w-full px-4 py-3 text-sm text-darkPrimary bg-gray-200 border border-gray-200 rounded-lg focus:bg-gray-100 focus:outline-none focus:border-darkPrimary focus:text-darkSecond"
            placeholder="Repetir Contraseña"
          />
          <div
            class="absolute inset-y-0 right-0 flex items-center mr-3 text-sm leading-5"
          >
              <OpenEye/>
              <CloseEye/>
          </div>
        </div>

        <!-- Barra Seguridad Contraseña -->
        <div class="h-1.5 rounded-full bg-gray-200 overflow-hidden">
          <div id="strengthBar" class="h-full w-0 transition-all duration-300 bg-gradient-to-r from-primary to-darkPrimary"></div>
        </div>

        <!-- Texto Seguridad Contraseña -->
        <div id="strengthLevel" class="text-sm text-gray-600">Nivel: Muy Débil</div>

        <!-- Requisitos -->
        <div class="space-y-2 text-sm">
          <div class="text-gray-600 mb-1">Tu contraseña debe contener:</div>
          <div id="lengthCheck" class="flex items-center gap-2 text-gray-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke-width="2"/>
              <path class="check-icon hidden" stroke-width="2" d="M9 12l2 2 4-4"/>
            </svg>
            <span>Mínimo 8 caracteres</span>
          </div>
          <div id="lowercaseCheck" class="flex items-center gap-2 text-gray-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke-width="2"/>
              <path class="check-icon hidden" stroke-width="2" d="M9 12l2 2 4-4"/>
            </svg>
            <span>Debe contener minúsculas</span>
          </div>
          <div id="uppercaseCheck" class="flex items-center gap-2 text-gray-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke-width="2"/>
              <path class="check-icon hidden" stroke-width="2" d="M9 12l2 2 4-4"/>
            </svg>
            <span>Debe contener mayúsculas</span>
          </div>
          <div id="numberCheck" class="flex items-center gap-2 text-gray-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke-width="2"/>
              <path class="check-icon hidden" stroke-width="2" d="M9 12l2 2 4-4"/>
            </svg>
            <span>Debe contener números</span>
          </div>
          <div id="specialCheck" class="flex items-center gap-2 text-gray-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke-width="2"/>
              <path class="check-icon hidden" stroke-width="2" d="M9 12l2 2 4-4"/>
            </svg>
            <span>Debe contener caracteres especiales</span>
          </div>
          <div id="matchCheck" class="flex items-center gap-2 text-gray-400">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke-width="2"/>
              <path class="check-icon hidden" stroke-width="2" d="M9 12l2 2 4-4"/>
            </svg>
            <span>Las contraseñas deben coincidir</span>
          </div>
        </div>

        <button
          type="submit"
          class="flex justify-center w-full p-3 font-semibold tracking-wide text-gray-100 transition duration-300 ease-in bg-primary border-2 border-lightPrimary rounded-lg cursor-pointer hover:border-primary hover:bg-lightPrimary hover:text-primary"
        >
          Cambiar Contraseña
        </button>
      </div>
    </div>
  </form>
  </div>

  <style>
    .check-icon {
      display: none;
    }
    .requirement-met {
      color: rgb(34 197 94); /* text-green-500 */
    }
    .requirement-met .check-icon {
      display: block;
    }
  </style>

  <script
  is:inline
  data-astro-rerun
  src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.js"
>
import { showToast } from "@/lib/utils";

  </script>

  <script is:inline>
    document.addEventListener('astro:page-load', () => {
      function getTokenFromUrl() {
        const hash = window.location.hash;
        const searchParams = new URLSearchParams(window.location.search);

        const token =
          searchParams.get('token') ||
          new URLSearchParams(hash.slice(1)).get('access_token');

        console.log('Token encontrado:', token);
        return token;
      }

      const form = document.getElementById("passForm");
      const accessToken = getTokenFromUrl();

      const newPassInput = document.getElementById('new_pass');
      const repeatPassInput = document.getElementById('repeat_new_pass');
      const strengthBar = document.getElementById('strengthBar');
      const strengthLevel = document.getElementById('strengthLevel');
      const requirements = {
        lengthCheck: document.getElementById('lengthCheck'),
        lowercaseCheck: document.getElementById('lowercaseCheck'),
        uppercaseCheck: document.getElementById('uppercaseCheck'),
        numberCheck: document.getElementById('numberCheck'),
        specialCheck: document.getElementById('specialCheck'),
        matchCheck: document.getElementById('matchCheck'),
      };

      const checkPasswordStrength = (password) => {
          return {
            length: password.length >= 8,
            lowercase: /[a-z]/.test(password),
            uppercase: /[A-Z]/.test(password),
            number: /[0-9]/.test(password),
            special: /[^A-Za-z0-9]/.test(password),
          };
      };

      const checkPasswordsMatch = (password, confirmPassword) => {
        return password === confirmPassword && password !== '';
      };

      const updateUI = (strengthChecks, doPasswordsMatch) => {
        const passedChecks = Object.values(strengthChecks).filter(Boolean).length;
        const strength = (passedChecks / 5) * 100;

        if (strengthBar) {
          strengthBar.style.width = `${strength}%`;
        }

        if (strengthLevel) {
          const levels = ['Muy Débil', 'Débil', 'Media', 'Fuerte', 'Muy Fuerte'];
          const levelIndex = Math.floor((passedChecks / 5) * 4);
          strengthLevel.textContent = `Nivel: ${levels[levelIndex]}`;
        }

        Object.entries(strengthChecks).forEach(([key, value]) => {
          const element = requirements[`${key}Check`];
          if (element) {
            if (value) {
              element.classList.add('requirement-met');
            } else {
              element.classList.remove('requirement-met');
            }
          }
        });

        if (requirements.matchCheck) {
          if (doPasswordsMatch) {
            requirements.matchCheck.classList.add('requirement-met');
          } else {
            requirements.matchCheck.classList.remove('requirement-met');
          }
        }
      };

      const handlePasswordInput = () => {
        const password = newPassInput.value;
        const confirmPassword = repeatPassInput.value;
        const strengthChecks = checkPasswordStrength(password);
        const doPasswordsMatch = checkPasswordsMatch(password, confirmPassword);
        updateUI(strengthChecks, doPasswordsMatch);
      };

      newPassInput?.addEventListener('input', handlePasswordInput);
      repeatPassInput?.addEventListener('input', handlePasswordInput);

      if (form) {
        form.addEventListener("submit", async (e) => {
          e.preventDefault();

          const newPass = newPassInput.value;
          const repeatPass = repeatPassInput.value;

          const strengthChecks = checkPasswordStrength(newPass);
          const doPasswordsMatch = checkPasswordsMatch(newPass, repeatPass);
          const allChecksPassed = Object.values(strengthChecks).every(Boolean) && doPasswordsMatch;

          if (!allChecksPassed) {
            showToast('Por favor, asegúrate de cumplir todos los requisitos de la contraseña.', 'warning');
            return;
          }

          try {
            const response = await fetch("/api/auth/modpassword", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                access_token: accessToken,
                new_password: newPass,
              }),
            });

            if (!response.ok) throw new Error("Error al actualizar contraseña");

            showToast('Contraseña actualizada correctamente', 'success');
            window.location.href = "/login";
          } catch (error) {
            console.error("Error:", error);
            showToast('Error al actualizar la contraseña: '+ error, 'success');
          }
        });
      }

      // Ejecutar la validación inicial si hay valores en los campos de contraseña
      if (newPassInput?.value || repeatPassInput?.value) {
        handlePasswordInput();
      }
    });
  </script>

</Layout>
