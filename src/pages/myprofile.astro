---
import Layout from "@/layouts/ProfileLayout.astro";
import { supabase } from "@/db/supabase";
import { RadialMultiProgress } from "@/components/ui/radial-multi-progress";

// ****************************************************************************

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

// Set the session with the cookies
const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

// If there is an error, delete the cookies and redirect to login
if (errorAuth) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/login");
}

const id = dataAuth?.user?.id || "";

const { data: userData, error: errorUserData } = await supabase
  .from('profiles')
  .select('id, email, full_name, steam_id, avatar, races, poles, wins, podiums, top5, top10, flaps, dnf, team, last_modified')
  .eq('id', id)
  .single();

if(errorUserData || userData === null) {
  return redirect("/index");
}

const teamID = userData?.team;
let TeamData: { name: string } = { name: "" };
if (teamID) {
  const { data, error: errorTeamData } = await supabase
    .from('team')
    .select('name')
    .eq('id', teamID)
    .single();
  if (!errorTeamData) {
    TeamData = data;
  }
}

const statsActiveFlag: boolean = userData.races > -1;

const date = new Date(String(userData.last_modified));
const actualDate = new Date();

const diffTime = Math.abs(actualDate.getTime() - date.getTime());
const diffHours = Math.ceil(diffTime / (1000 * 60 * 60));

const canUpdateFlag: boolean = diffHours > 48;

---

<Layout title="ESP Racing: Mi Perfil">
  <h2 class="text-5xl font-extrabold border-b-2 border-primary w-full">
    Mi Perfil
  </h2>

  <img
    src={String(userData.avatar)}
    alt="Avatar"
    class="w-20 mt-5 rounded-full"
  />
  <div class="grid w-11/12 grid-cols-1 my-5 lg:grid-cols-2 xl:grid-cols-3">
    <div class="mb-2">
      <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
        Nombre
      </h3>
      <p class="pl-2 text-2xl font-medium">{userData.full_name}</p>
    </div>

    <div class="blockdata">
      <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
        Steam ID
      </h3>
      <p class="pl-2 text-2xl font-medium">{userData.steam_id}</p>
    </div>

    {
      TeamData?.name === null ||
      TeamData?.name === undefined ||
      TeamData?.name === "" ? (
        <div class="blockdata">
          <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
            Equipo
          </h3>
          <p class="pl-2 text-2xl font-medium">Sin Equipo</p>
        </div>
      ) : (
        <div class="blockdata">
          <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
            Equipo
          </h3>
          <p class="pl-2 text-2xl font-medium">{TeamData.name}</p>
        </div>
      )
    }
  </div>
  {
    statsActiveFlag ? (
      <>
        <h2 class="text-5xl font-extrabold border-b-2 border-primary w-full mt-12">
          Estadisticas de Carrera
        </h2>

        <div class="flex flex-col lg:flex-row lg:items-start lg:justify-center w-full gap-8 my-8">
          <div class="flex justify-center lg:justify-center lg:w-1/2">
            <RadialMultiProgress
              data={[
                {
                  label: "Victorias",
                  value: userData.races > 0 ? Math.round(userData.wins/userData.races*100) : 0,
                  color: "#ffec00"
                },
                {
                  label: "Podios",
                  value: userData.races > 0 ? Math.round(userData.podiums/userData.races*100) : 0,
                  color: "#37ffed"
                },
                {
                  label: "Top 5",
                  value: userData.races > 0 ? Math.round(userData.top5/userData.races*100) : 0,
                  color: "#ff0b90"
                },
                {
                  label: "Top 10",
                  value: userData.races > 0 ? Math.round(userData.top10/userData.races*100) : 0,
                  color: "#00ff1b"
                },
                {
                  label: "DNF",
                  value: userData.races > 0 ? Math.round(userData.dnf/userData.races*100) : 0,
                  color: "#ff2300"
                }
              ]}
            />
          </div>
          <div class="lg:w-1/2">
            <div class="grid w-full grid-cols-1 my-5 gap-4 md:grid-cols-2">
              <div class="blockdata">
                <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
                  Carreras
                </h3>
                <p class="pl-2 text-2xl font-medium">{userData.races}</p>
              </div>
              <div class="blockdata">
                <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
                  Victorias
                </h3>
                <p class="pl-2 text-2xl font-medium">{userData.wins}</p>
              </div>
              <div class="blockdata">
                <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
                  Podios
                </h3>
                <p class="pl-2 text-2xl font-medium">{userData.podiums}</p>
              </div>
              <div class="blockdata">
                <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
                  Top 5
                </h3>
                <p class="pl-2 text-2xl font-medium">{userData.top5}</p>
              </div>
              <div class="blockdata">
                <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
                  Top 10
                </h3>
                <p class="pl-2 text-2xl font-medium">{userData.top10}</p>
              </div>
              <div class="blockdata">
                <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
                  V. Rápidas
                </h3>
                <p class="pl-2 text-2xl font-medium">{userData.flaps}</p>
              </div>
              <div class="blockdata">
                <h3 class="text-4xl font-semibold border-b-2 border-primary w-3/4">
                  DNF
                </h3>
                <p class="pl-2 text-2xl font-medium">{userData.dnf}</p>
              </div>
            </div>
          </div>
        </div>
      </>
    ) : (
      <>
        <h2 class="text-5xl font-extrabold border-b-2 border-primary w-full mt-12">
          Estadisticas de Carrera
        </h2>
        <div>
          <p> *Actualmente, no hay estadisticas de tu perfil cargadas en el sistema, si quieres actualizarlas, haz click en el botón de abajo para realizar el cálculo</p>
        </div>
        <div class="grid grid-flow-col mt-8">
          {userData.steam_id ? (
            <a
              id = "updateStats" data-id = {userData.id}
              class="py-1.5 px-2 w-fit bg-darkPrimary text-lightPrimary border-primary border-2 rounded-md font-medium text-lg hover:bg-darkSecond"
            >
              Actualizar Estadisticas
            </a>
          ) : (
            <a
              class="py-1.5 px-2 w-fit bg-darkPrimary text-lightPrimary border-primary border-2 rounded-md font-medium text-lg cursor-not-allowed opacity-60"
              title="Debes tener un Steam ID para actualizar estadísticas"
            >
              Actualizar Estadisticas
            </a>
          )}
          <div id="loadingStats" style="display:none; align-items:center; gap:8px; margin-left:16px;">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="animate-spin">
              <circle cx="12" cy="12" r="10" stroke="#da392b" stroke-width="4" stroke-linecap="round" stroke-dasharray="60 40"/>
            </svg>
            <span>Cargando estadísticas...</span>
          </div>
        </div>
      </>
    )
    
  }
  <div class="grid grid-flow-col mt-8">
          {canUpdateFlag ? (
            <a
              href="/modprofile"
              class="py-1.5 px-2 w-fit bg-darkPrimary text-lightPrimary border-primary border-2 rounded-md font-medium text-lg hover:bg-darkSecond"
            >
              Modificar Perfil
            </a>
          ) : (
            <a
              id="disabledProfileButton" data-diffhours={diffHours}
              class="py-1.5 px-2 w-fit bg-darkPrimary text-lightPrimary border-primary border-2 rounded-md font-medium text-lg hover:bg-darkSecond cursor-not-allowed"
            >
              Modificar Perfil
            </a>
          )}
    </div>

  <script>
    import { showToast } from '@/lib/utils';
    function initializeProfileButton() {
      const disabledButton = document.getElementById('disabledProfileButton');
      if (disabledButton) {
        const diffHours = disabledButton.getAttribute('data-diffhours');
        disabledButton.addEventListener('click', () => {
          window.showToast(`Solo puedes modificar tu perfil cada 48 horas. Último cambio hace ${diffHours} horas`, 'info');
        });
      }
    }
    const updateStatsBtn = document.getElementById('updateStats');
    const loadingStats = document.getElementById('loadingStats');
    if (updateStatsBtn) {
      updateStatsBtn.addEventListener('click', async () => {
        try {
          if (loadingStats) loadingStats.style.display = 'flex';
          updateStatsBtn.classList.add('pointer-events-none', 'opacity-60');
          const userId = updateStatsBtn.getAttribute('data-id');
          const response = await fetch('/api/admin/stats/newUserStats', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId })
          });
          const data = await response.json();
          if (!response.ok) {
            throw new Error(data.error);
          }
          window.location.reload();
        } catch (error) {
          if (error instanceof Error) {
            alert(error.message || 'Error al actualizar las estadísticas');
          } else {
            alert('Error al actualizar las estadísticas');
          }
        } finally {
          if (loadingStats) loadingStats.style.display = 'none';
          updateStatsBtn.classList.remove('pointer-events-none', 'opacity-60');
        }
      });
    }
    initializeProfileButton();
    document.addEventListener('astro:page-load', initializeProfileButton);
  </script>

</Layout>
