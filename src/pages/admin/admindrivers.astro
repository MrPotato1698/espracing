---
import Layout from "@/layouts/ProfileLayout.astro";
import { supabase } from "@/db/supabase";
import { DataTable } from "@/components/data-table";
import { showToast } from "@/lib/utils";
import { Combobox } from "@/components/ui/combobox";
import { UpdateDriverStatForm } from "@/components/UpdateDriverStatForm";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

// Set the session with the cookies
const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

// If there is an error, delete the cookies and redirect to login
if (errorAuth) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/login");
}

const id = dataAuth?.user?.id || "";

const { data: userData } = await supabase
  .from("profiles")
  .select("roleesp")
  .eq("id", id)
  .single();

if (userData == null || userData.roleesp == null || userData.roleesp > 1) {
  return redirect("/index");
}

const { data: driversData } = await supabase
  .from("profiles")
  .select("id, full_name, steam_id, team(name), races, roleesp!inner(name)")
  .order("id", { ascending: true });

// Definición de columnas para el DataTable
const columns = [
  { header: "Nombre", accessor: "full_name" },
  { header: "Equipo", accessor: "team.name" },
  { header: "Steam ID", accessor: "steam_id" },
  { header: "Carreras", accessor: "races" },
  { header: "Rol", accessor: "roleesp.name" }
];

const serializedDriversData = driversData ? JSON.parse(JSON.stringify(driversData)) : [];

/** @type {{ id: string, full_name: string, steam_id: string, races: number }[]} */
const typedDriversData = serializedDriversData;

const driverOptions = typedDriversData.map((driver: { id: string, full_name: string, steam_id: string, races: number }) => ({
  value: driver.id,
  label: `${driver.full_name} - Steam ID: ${driver.steam_id} - Carreras: ${driver.races}`,
}));
---

<Layout title="ESP Racing: Administrar Pilotos">
  <h2 class="text-5xl font-extrabold border-b-2 border-primary w-full">
    Administración de Pilotos
  </h2>

  <div class="py-4 mx-auto text-center" style="width: 99%">
    <p class="text-5xl font-bold border-b border-primary w-fit mx-auto">
      Lista de Pilotos del Sistema
    </p>
    <div class="mt-6">
      <DataTable
        client:only="react"
        data={serializedDriversData}
        columns={columns}
        onEdit={{ path: "driver" }}
        onDelete={{ path: "driver" }}
        pageSize={10}
        searchable={true}
        searchPlaceholder="Buscar por nombre de piloto o equipo"
        searchableColumns={[
          {accessor: "full_name"},
          {accessor: "team.name"}
        ]}
      />
    </div>
  </div>

  <div class="py-4 mx-auto text-center" style="width: 99%">
    <p class="text-5xl font-bold border-b border-primary w-fit mx-auto">
      Actualizar estadistica de Piloto
    </p>
    <UpdateDriverStatForm client:only="react" driverOptions={driverOptions} />
  </div>

</Layout>

