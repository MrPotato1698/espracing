---
import Layout from "@/layouts/ProfileLayout.astro";
import { supabase } from "@/db/supabase";
import { DataTable } from "@/components/data-table";
import NewChamp from "@/components/NewChamp";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

// Set the session with the cookies
const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

// If there is an error, delete the cookies and redirect to login
if (errorAuth) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/login");
}

const id = dataAuth?.user?.id || "";

const { data: userData } = await supabase
  .from("profiles")
  .select("roleesp")
  .eq("id", id)
  .single();

if (userData == null || userData.roleesp == null || userData.roleesp > 1) {
  return redirect("/index");
}

const { data: champsData } = await supabase
  .from("championship")
  .select(`id, name, season, race:race(id), number_of_races_total, isfinished`)
  .eq("ischampionship", true)
  .order("id", { ascending: true });

const { data: eventsData } = await supabase
  .from("championship")
  .select(`id, name, season, race:race(id)`)
  .eq("ischampionship", false)
  .order("id", { ascending: true });

  // Definición de columnas para eventos
const eventColumns = [
  { header: "Nombre", accessor: "name" },
  { header: "Nº Carreras", accessor: "raceCount" },
  { header: "Temporada", accessor: "season" }
];

// Definición de columnas para campeonatos
const champColumns = [
  { header: "Nombre", accessor: "displayName" },
  { header: "Nº Carreras", accessor: "raceStatus" },
  { header: "Temporada", accessor: "season" }
];

// Función para formatear la temporada
const formatSeason = (season: string) => {
  if (season === "0") return "Sin Temporada / Otra";
  if (season.length === 4 && !isNaN(Number(season))) {
    const firstPart = parseInt(season.substring(0, 2));
    const secondPart = parseInt(season.substring(2, 4));
    const startYear = 2000 + firstPart;
    const endYear = 2000 + secondPart;
    return `${startYear}/${endYear}`;
  }
  return season;
};

// Obtener temporadas únicas
const seasons = [...new Set([...eventsData || [], ...champsData || []]
  .map(item => item.season))]
  .filter(Boolean)
  .sort();

// Temporadas formateadas para filtro
const seasonOptions = seasons.map(season => formatSeason(season ? season : "0"));

// Preparar datos para eventos
const eventTableData = eventsData?.map((event) => ({
  id: event.id,
  name: event.name,
  raceCount: event.race.length,
  season: event.season,
  seasonDisplay: formatSeason(event.season ? event.season : "0")
})) || [];

// Preparar datos para campeonatos
const champTableData = champsData?.map((champ) => ({
  id: champ.id,
  displayName: (champ.race.length < champ.number_of_races_total) && champ.isfinished ?
    champ.name + ' - CANCELADO' : champ.name,
  raceStatus: `${champ.race.length}/${champ.number_of_races_total}`,
  season: champ.season,
  seasonDisplay: formatSeason(champ.season ? champ.season : "0"),
})) || [];
---

<Layout title="ESP Racing: Administrar Campeonatos">
  <h2 class="text-5xl font-extrabold border-b-2 border-primary w-full">
    Administración de Eventos y Campeonatos
  </h2>

  <div class="py-4 mx-auto text-center" style="width: 99%">
    <p class="text-5xl font-bold border-b border-primary w-fit mx-auto">
      Lista de Eventos del Sistema
    </p>

    <div class="mt-6">
      <DataTable
        client:only="react"
        data={eventTableData}
        columns={eventColumns}
        onEdit={{ path: "championship" }}
        onDelete={{ path: "championship" }}
        pageSize={10}
        filterOptions={seasonOptions}
        filterAccessor="Temporada"
        initialSortConfig={{ key: "name", direction: "asc" }}
        searchable={true}
        searchPlaceholder="Buscar por nombre de evento o temporada"
        searchableColumns={[
          {accessor: "name"},
          {accessor: "season"}
        ]}
      />
    </div>
  </div>

  <div class="py-4 mx-auto text-center" style="width: 99%">
    <p class="text-5xl font-bold border-b border-primary w-fit mx-auto">
      Lista de Campeonatos del Sistema
    </p>

    <div class="mt-6">
      <DataTable
        client:only="react"
        data={champTableData}
        columns={champColumns}
        onEdit={{ path: "championship" }}
        onDelete={{ path: "championship" }}
        pageSize={10}
        filterOptions={seasonOptions}
        filterAccessor="seasonDisplay"
        initialSortConfig={{ key: "displayName", direction: "asc" }}
        searchable={true}
        searchPlaceholder="Buscar por nombre del campeonato o temporada"
        searchableColumns={[
          {accessor: "displayName"},
          {accessor: "season"}
        ]}
      />
    </div>
  </div>

  <div class="py-4 mx-auto text-center" style="width: 99%">
    <NewChamp client:load />
  </div>
</Layout>
