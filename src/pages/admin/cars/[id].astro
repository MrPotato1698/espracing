---
import Layout from "@/layouts/ProfileLayout.astro";
import { supabase } from "@/db/supabase";

const { id } = Astro.params;
const { cookies, redirect } = Astro;

if (!id) {
  return redirect("/admin/admincars");
}

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (errorAuth) {
  cookies.delete("sb-access-token", { path: "/" });
  cookies.delete("sb-refresh-token", { path: "/" });
  return redirect("/login");
}

const idAuth = dataAuth?.user?.id || "";
const { data: roleData } = await supabase
  .from("profiles")
  .select("roleesp")
  .eq("id", idAuth)
  .single();
if (roleData == null || roleData.roleesp == null || roleData.roleesp > 1) {
  return redirect("/index");
}

const { data: carData } = await supabase
  .from("car")
  .select("*")
  .eq("id", parseInt(id))
  .single();
if (!carData) {
  return redirect("/admin/admincars");
}

const { data: carBrandList } = await supabase
  .from("carbrand")
  .select("id, name")
  .order("name", { ascending: true });
const { data: classList } = await supabase
  .from("carclass")
  .select("id, name, short_name")
  .order("name", { ascending: true });
---

<Layout title="ESP Racing: Modificaci칩n datos de coche">
  <h2 class="text-5xl font-bold border-b border-primary w-fit mx-auto">
    Modificar Datos de Coche
  </h2>
  <form id="editCarForm" class="flex flex-col mt-5">
    <label class="mt-5 text-lg font-semibold" for="carbrand">
      Marca del coche:
    </label>
    <select
      class="w-full p-3 border border-solid border-lightSecond rounded-md mt-2 mb-4 resize-y text-white bg-darkSecond hover:border-primary"
      id="carbrand"
      name="carbrand"
      required
    >
      <option value="">Selecciona una marca</option>
      {carBrandList?.map((brand) => (
        <option value={brand.id} selected={carData.brand === brand.id}>{brand.name}</option>
      ))}
    </select>
    <label class="mt-5 text-lg font-semibold" for="model">
      Modelo:
    </label>
    <input
      type="text"
      name="model"
      value={carData?.model}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
      required
    />
    <label class="mt-5 text-lg font-semibold" for="year">
      A침o:
    </label>
    <input
      type="number"
      name="year"
      value={carData?.year}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
      required
    />
    <label class="mt-5 text-lg font-semibold" for="carclass">
      Clase del coche:
    </label>
    <select
      class="w-full p-3 border border-solid border-lightSecond rounded-md mt-2 mb-4 resize-y text-white bg-darkSecond hover:border-primary"
      id="carclass"
      name="carclass"
      required
    >
      <option value="">Selecciona una clase</option>
      {classList?.map((cl) => (
        <option value={cl.id} selected={carData.class === cl.id}>{cl.name}</option>
      ))}
    </select>
    <label class="mt-5 text-lg font-semibold" for="power">
      Potencia (cv):
    </label>
    <input
      type="number"
      name="power"
      value={carData?.power}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
    />
    <label class="mt-5 text-lg font-semibold" for="torque">
      Par (Nm):
    </label>
    <input
      type="number"
      name="torque"
      value={carData?.torque}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
    />
    <label class="mt-5 text-lg font-semibold" for="weight">
      Peso (kg):
    </label>
    <input
      type="number"
      name="weight"
      value={carData?.weight}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
    />
    <label class="mt-5 text-lg font-semibold" for="description">
      Descripci칩n:
    </label>
    <input
      type="text"
      name="description"
      value={carData?.description}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
    />
    <label class="mt-5 text-lg font-semibold" for="tyreTimeChange">
      Tiempo cambio gomas (s):
    </label>
    <input
      type="number"
      step="0.01"
      name="tyreTimeChange"
      value={carData?.tyreTimeChange}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
    />
    <label class="mt-5 text-lg font-semibold" for="maxLiter">
      Combustible m치ximo (L):
    </label>
    <input
      type="number"
      step="0.01"
      name="maxLiter"
      value={carData?.maxLiter}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
    />
    <label class="mt-5 text-lg font-semibold" for="fuelLiterTime">
      Tiempo de repostaje (s):
    </label>
    <input
      type="number"
      step="0.01"
      name="fuelLiterTime"
      value={carData?.fuelLiterTime}
      class="bg-darkSecond text-lightPrimary text-lg w-11/12 border-none rounded-md p-2 ml-1 mt-px"
    />
    <input type="hidden" name="car_id" value={id} />
    <div>
      <button
        type="submit"
        class="py-1.5 px-3 w-fit mr-2 bg-darkPrimary text-white border-[#29dd38] border-2 rounded-md my-4 font-medium text-lg hover:bg-[#29dd38] hover:text-darkPrimary"
      >
        Aceptar
      </button>
      <button
        type="button"
        onclick="window.location.href = '/admin/admincars'"
        class="py-1.5 px-3 w-fit bg-darkPrimary text-white border-primary border-2 rounded-md my-4 font-medium text-lg hover:bg-primary hover:text-darkPrimary"
      >
        Cancelar
      </button>
    </div>
  </form>
</Layout>

<script>
import { showToast } from "@/lib/utils";

  const form = document.getElementById("editCarForm") as HTMLFormElement | null;

  if (form) {
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      try {
        const response = await fetch("/api/admin/car", {
          method: "PUT",
          body: formData,
        });
        if (!response.ok) {
          throw new Error(`Error en la respuesta del servidor: ${response.status}`);
        }
        const result = await response.json();
        if (result.success) {
          window.location.href = "/admin/admincars";
          showToast("Coche actualizado correctamente", "success");
        } else {
          throw new Error(result.error || "Error desconocido");
        }
      } catch (error) {
        showToast("Error al actualizar el coche: " + error, "error");
        console.error("Error al actualizar el coche:", error);
      }
    });
  }
</script>
