---
import Layout from "@/layouts/ProfileLayout.astro";
import { supabase } from "@/lib/supabase";
import { turso } from "@/turso";
import Open from "@/icons/Open.astro";
import Readed from "@/icons/Marked.astro";
import Unreaded from "@/icons/NoMark.astro";
import Trash from "@/icons/Trash.astro";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

// Set the session with the cookies
const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

// If there is an error, delete the cookies and redirect to login
if (errorAuth) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/login");
}

const id = dataAuth?.user?.id || "";
const email = dataAuth?.user?.email || "";

// Asign ID to user in Turso if it doesn't exist
const emailSearchQuery = await turso.execute({
  sql: "SELECT id FROM User WHERE email = ?",
  args: [email],
});

const idSearch = emailSearchQuery.rows[0].email;

if (idSearch === undefined || idSearch === null) {
  const transaction = await turso.transaction("write");
  await transaction.execute({
    sql: "UPDATE User SET id = ? WHERE email = ?",
    args: [id, email],
  });
  await transaction.commit();
}

// Get user data
const { rows: MessageListData } = await turso.execute({
  sql: "SELECT id, name_emissor, readed FROM Message WHERE name_receiver = ?",
  args: [email],
});
---

<Layout title="ESP Racing: Bandeja de Mensajes">
  <div class="text-center pt-4 px-3 ml-64 mr-auto">
    <p2 class="text-5xl font-bold border-b border-[#da392b] w-fit mx-auto"
      >Bandeja de Mensajes</p2
    >
    <table class="mt-6 w-full border-collapse border border-[#f9f9f9]">
      <thead class="font-medium bg-[#da392b]">
        <tr>
          <th>NÂº</th>
          <th>Emisor</th>
          <th>Abrir</th>
          <th>Cambiar Leido</th>
          <th>Eliminar</th>
        </tr>
      </thead>
      <tbody>
        {
          MessageListData.map((msg, index) =>
            msg.readed === 1 ? (
              <tr class="">
                <td class="font-semibold">
                  <a href={`/message/${msg.id}`}>{index + 1}</a>
                </td>
                <td>{msg.name_emissor}</td>
                <td>
                  <a href={`/message/${msg.id}`}>
                    <Open moreClass="w-6 text-center mx-auto" />
                  </a>
                </td>
                <td>
                  <a href="#" data-action="update" data-id={msg.id}>
                    <Unreaded moreClass="w-6 text-center mx-auto" />
                  </a>
                </td>
                <td>
                  <a href="#" data-action="delete" data-id={msg.id}>
                    <Trash moreClass="w-6 text-center mx-auto" />
                  </a>
                </td>
              </tr>
            ) : (
              <tr class="">
                <td class="font-semibold">{index + 1}</td>
                <td>{msg.name_emissor}</td>
                <td>
                  <a href={`/message/${msg.id}`}>
                    <Open moreClass="w-6 text-center mx-auto" />
                  </a>
                </td>
                <td>
                  <a href="#" data-action="update" data-id={msg.id}>
                    <Readed moreClass="w-6 text-center mx-auto" />
                  </a>
                </td>
                <td>
                  <a href="#" data-action="delete" data-id={msg.id}>
                    <Trash moreClass="w-6 text-center mx-auto" />
                  </a>
                </td>
              </tr>
            )
          )
        }
      </tbody>
    </table>
  </div>
</Layout>

<style>
  tbody tr:nth-child(odd) {
    background-color: #0f0f0f;
  }

  tbody tr:nth-child(even) {
    background-color: #19191c;
  }
</style>

<script>
  document.querySelectorAll("a[data-action]").forEach((link) => {
    console.log(link);
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const action = (e.target as HTMLElement)?.getAttribute("data-action");
      const id = (e.target as HTMLElement)?.getAttribute("data-id");
      if (action && id) {
        const handleAction = async (action: string, id: any) => {
          try {
            let response;
            if (action === "update") {
              response = await fetch("../api/messages/changeReaded", {
                method: "POST",
                body: JSON.stringify({ action, id }),
              });
            } else if (action === "delete") {
              response = await fetch("../api/messages/deleteMsg", {
                method: "POST",
                body: JSON.stringify({ action, id }),
              });
            }
          } catch (error) {
            console.error("Error:", error);
          }
        };
      }
    });
  });
</script>
