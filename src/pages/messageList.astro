---
import Layout from "@/layouts/ProfileLayout.astro";
import { supabase } from "@/db/supabase";
import Open from "@/icons/Open.astro";
import Readed from "@/icons/Marked.astro";
import Unreaded from "@/icons/NoMark.astro";
import Trash from "@/icons/Trash.astro";
import Check from "@/icons/Check.astro";
import Ban from "@/icons/Ban.astro";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

// Set the session with the cookies
const { data: dataAuth, error: errorAuth } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

// If there is an error, delete the cookies and redirect to login
if (errorAuth) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/login");
}

const idAuth = dataAuth?.user?.id || "";

// Obtener el rol del usuario que accede al sistema de mensajes
const {data: UserRol} = await supabase
  .from("profiles")
  .select("roleesp")
  .eq("id", idAuth)
  .single();

let admin:Boolean = false;
UserRol?.roleesp === 1 ? admin = true : admin = false;

// Obtener los mensajes del usuario
const {data: MessageListData} = await supabase
  .from("message")
  .select("*")
  .eq("name_receiver", idAuth);

// Obtener las solicitudes de equipo del usuario
const {data: TeamRequestData} = await supabase
  .from("teamsapplication")
  .select("id, user_application, type")
  .eq("team_manager", idAuth);

let users: { full_name: string }[] = [];
if (TeamRequestData) {
  const userIds = TeamRequestData.map(app => app.user_application);

  const { data: fetchedUsers, error: userError } = await supabase
    .from("profiles")
    .select("full_name")
    .in("id", userIds);

  users = (fetchedUsers || []).filter(user => user.full_name !== null) as { full_name: string }[];
}

---

<Layout title="ESP Racing: Bandeja de Mensajes">
  <div class="mr-auto text-center">
    {admin ? (
      <p2 class="text-5xl font-bold border-b border-primary w-fit mx-auto">
        Bandeja de Mensajes
      </p2>
      <table class="mt-6 w-full border-collapse border border-lightPrimary">
        <thead class="font-medium bg-primary">
          <tr>
            <th>Nº</th>
            <th>Emisor</th>
            <th>Abrir</th>
            <th>Cambiar Leido</th>
            <th>Eliminar</th>
          </tr>
        </thead>
        <tbody>
          {
            MessageListData?.map((msg, index) => (
              <tr class="">
                <td class="font-semibold">
                  <a href={`/message/${msg.id}`}>{index + 1}</a>
                </td>
                <td>{msg.name_emissor}</td>
                <td>
                  <a href={`/message/${msg.id}`}>
                  <Open moreClass="w-6 text-center mx-auto" />
                  </a>
                </td>
                <td>
                  <button class = "align-middle change-status" data-id={msg.id} data-readed={msg.readed}>
                  {msg.readed ? (
                    <Unreaded moreClass="w-6 text-center mx-auto" />
                  ) : (
                    <Readed moreClass="w-6 text-center mx-auto" />
                  )}
                  </button>
                </td>

                <td>
                  <button class="align-middle delete-message" data-id={msg.id}>
                    <Trash moreClass="w-6 text-center mx-auto" />
                  </button>
                </td>
              </tr>
            ))
          }
        </tbody>
      </table>
      <div class = "mb-6"></div>
    ):null
    }

  <p2 class="text-5xl font-bold border-b border-primary w-fit mx-auto">
    Bandeja de Solicitudes de Equipo
  </p2>
  <table class="mt-6 w-full border-collapse border border-lightPrimary">
    <thead class="font-medium bg-primary">
      <tr>
        <th>Nº</th>
        <th>Nombre Solicitante</th>
        <th>Tipo</th>
        <th>Aceptar</th>
        <th>Rechazar</th>
      </tr>
    </thead>
    <tbody>
      {
        TeamRequestData?.map((msg, index) => (
          <tr class="">
            <td class="font-semibold">
              {index + 1}
            </td>
            <td>{users[index].full_name}</td>
            <td>{msg.type == 'join' ? 'Unirse a equipo':'Crear equipo'}</td>
            <td>
              <button class = "align-middle accept-invitation" data-id={msg.id}>
                <Check moreClass="w-6 text-center mx-auto" />
              </button>
            </td>

            <td>
              <button class="align-middle reject-invitation" data-id={msg.id}>
                <Ban moreClass="w-6 text-center mx-auto" />
              </button>
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>

  </div>
</Layout>

<style>
  tbody tr:nth-child(odd) {
    background-color: #0f0f0f;
  }

  tbody tr:nth-child(even) {
    background-color: #19191c;
  }
</style>

<script>
    import { showToast } from "@/lib/utils";
    window.showToast = showToast;
</script>

<script is:inline data-astro-rerun>
  document.addEventListener('astro:page-load', () => {
    const changeStatusButtons = document.querySelectorAll('.change-status');
    const deleteButtons = document.querySelectorAll('.delete-message');
    const acceptButtons = document.querySelectorAll('.accept-invitation');
    const rejectButtons = document.querySelectorAll('.reject-invitation');

    changeStatusButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        const id = button.getAttribute('data-id');
        const currentReaded = button.getAttribute('data-readed');
        const newReaded = currentReaded === '1' ? '0' : '1';

        try {
          const response = await fetch('/api/messages/changeReaded', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id, readed: newReaded }),
          });

          if (response.ok) {
            // Actualiza UI
            button.setAttribute('data-readed', newReaded);
            const icon = button.querySelector('svg');
            if (newReaded === '1') {
              if (icon) {
                icon.outerHTML = '<Unreaded moreClass="w-6 text-center mx-auto" />';
              }
            } else {
              if (icon) {
                icon.outerHTML = '<Readed moreClass="w-6 text-center mx-auto" />';
              }
            }
            const closestTr = button.closest('tr');
            if (closestTr) {
              closestTr.classList.toggle('read');
              closestTr.classList.toggle('unread');
            }
            window.location.reload();
          } else {
            window.showToast('Error actualizando el estado del mensaje: '+ response.error, 'error');
            console.error('Error actualizando el estado del mensajes');
          }
        } catch (error) {
          window.showToast('Error: '+ error, 'error');
          console.error('Error:', error);
        }
      });
    });

    deleteButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        const id = button.getAttribute('data-id');

        if (confirm('¿Estás seguro de que quieres eliminar este mensaje?')) {
          try {
            const response = await fetch('/api/messages/deleteMsg', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id }),
            });

            if (response.ok) {
              // Elimina la fila de la tabla
              const closestTr = button.closest('tr');
              if (closestTr) {
                closestTr.remove();
              }
              window.location.reload();
            } else {
              window.showToast('Error eliminando el mensaje: '+ response.error, 'error');
              console.error('Error eliminando el mensaje');
            }
          } catch (error) {
            window.showToast('Error: '+ error, 'error');
            console.error('Error:', error);
          }
        }
      });
    });

    acceptButtons.forEach(button =>{
      button.addEventListener('click', async (e) =>{
        e.preventDefault();
        const id = button.getAttribute('data-id');

        try {
          const response = await fetch('/api/teams/acceptTeamInvitation', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id }),
          });

          if (response.ok) {
            // Elimina la fila de la tabla
            const closestTr = button.closest('tr');
            if (closestTr) {
              closestTr.remove();
            }
            window.location.reload();
          } else {
            window.showToast('Error aceptando la petición: '+ response.error, 'error');
            console.error('Error aceptando la petición');
          }
        } catch (error) {
          window.showToast('Error: '+ error, 'error');
          console.error('Error:', error);
        }
      })
    });

    rejectButtons.forEach(button=>{
      button.addEventListener('click', async (e) =>{
        e.preventDefault();
        const id = button.getAttribute('data-id');

        if (confirm('¿Estás seguro de que quieres eliminar esta petición?')) {
          try {
            const response = await fetch('/api/teams/rejectTeamInvitation', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id }),
            });

            if (response.ok) {
              // Elimina la fila de la tabla
              const closestTr = button.closest('tr');
              if (closestTr) {
                closestTr.remove();
              }
              window.location.reload();
            } else {
              window.showToast('Error eliminando la petición: '+ response.error, 'error');
              console.error('Error eliminando la petición');
            }
          } catch (error) {
            window.showToast('Error: '+ error, 'error');
            console.error('Error:', error);
          }
        }
      });
    });

  });

</script>
