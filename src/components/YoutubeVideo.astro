---
interface Props {
  videoId: string;
  title: string;
}

const { videoId, title } = Astro.props;
---

<div
  class:list={[
    "relative w-full aspect-video bg-muted rounded-lg overflow-hidden cursor-pointer transition-all duration-200 border border-primary hover:shadow-lg hover:shadow-primary/20 hover:-translate-y-0.5 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
  ]}
  data-video-id={videoId}
  role="button"
  tabindex="0"
>
  <div class="relative w-full h-full group">
    <img
      src={`https://i.ytimg.com/vi/${videoId}/maxresdefault.jpg`}
      alt="YT Video Thumbnail"
      loading="lazy"
      decoding="async"
      class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
    />

    <!-- Overlay con gradiente -->
    <div class="absolute inset-0 bg-gradient-to-br from-background/10 to-background/30 group-hover:from-background/20 group-hover:to-background/40 transition-all duration-300 flex items-center justify-center">

      <!-- Botón de play -->
      <div class="w-16 h-12 md:w-20 md:h-14 bg-primary text-primary-foreground rounded-md flex items-center justify-center transition-all duration-200 shadow-lg shadow-primary/40 group-hover:scale-110 group-hover:shadow-xl group-hover:shadow-primary/60">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="w-6 h-6 md:w-8 md:h-8 ml-1">
          <polygon points="5,3 19,12 5,21"></polygon>
        </svg>
      </div>
    </div>

    <!-- Info del video (aparece en hover) -->
    <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-background/90 to-transparent p-4 transform translate-y-full group-hover:translate-y-0 transition-transform duration-300">
      <h3 class="text-sm md:text-base font-medium text-foreground line-clamp-2 leading-tight">
        {title}
      </h3>
    </div>
  </div>
</div>

<script>
  class LightweightYoutube {
    constructor() {
      this.init();
    }

    init() {
      document.addEventListener('click', this.handleClick.bind(this));
      document.addEventListener('keydown', this.handleKeydown.bind(this));
    }

    handleClick(event: MouseEvent) {
      const embed = (event.target as Element)?.closest('[data-video-id]');
      if (embed && !embed.classList.contains('loaded')) {
        this.loadVideo(embed);
      }
    }

    handleKeydown(event: KeyboardEvent) {
      if (event.key === 'Enter' || event.key === ' ') {
        const embed = (event.target as Element)?.closest('[data-video-id]');
        if (embed && !embed.classList.contains('loaded')) {
          event.preventDefault();
          this.loadVideo(embed);
        }
      }
    }

    loadVideo(embed: Element) {
      const videoId = (embed as HTMLElement).dataset.videoId;

      if (!videoId) return;

      const iframe = document.createElement('iframe');
      iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0&modestbranding=1`;
      iframe.frameBorder = '0';
      iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
      iframe.allowFullscreen = true;
      iframe.loading = 'lazy';
      iframe.className = 'w-full h-full border-none';

      embed.innerHTML = '';
      embed.appendChild(iframe);
      embed.classList.add('loaded');
    }
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new LightweightYoutube());
  } else {
    new LightweightYoutube();
  }
</script>

<style>
  /* Solo CSS que no se puede hacer con Tailwind */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>